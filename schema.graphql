# Minting Contract
type CollateralAsset @entity {
  # asset token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # token
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!

  bituMinted: BigDecimal!
  bituBurned: BigDecimal!

  assetLiquidated: BigDecimal!
  assetLiquidatedUSD: BigDecimal!
  bituLiquidated: BigDecimal!

  fees: BigDecimal!
  feesUSD: BigDecimal!

  collateralRatio: BigDecimal!

  # User count
  userCount: BigInt!
}

type UserCollateralAsset @entity {
  # `user-token`
  id: ID!

  tokenAddress: ID!
  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # collateral
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!

  bituMinted: BigDecimal!
  bituBurned: BigDecimal!

  assetLiquidated: BigDecimal!
  assetLiquidatedUSD: BigDecimal!
  bituLiquidated: BigDecimal!

  fees: BigDecimal!
  feesUSD: BigDecimal!

  collateralRatio: BigDecimal!

  # User
  user: User!
}

type User @entity {
  # Address
  id: ID!

  collateralAssets: [UserCollateralAsset!]! @derivedFrom(field: "user")
}

type Redeem @entity {
  id: Bytes!
  redeemer: Bytes! # address
  tokenAddress: Bytes! # address
  symbol: String!
  name: String!
  decimals: BigInt!
  collateral_amount: BigDecimal! # uint256
  bitu_amount: BigDecimal! # uint256
  collateral_ratio: BigInt! # uint256
  interest: BigDecimal! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  dayData: RedeemDayData!
}

type RedeemDayData @entity {
  # timestamp / 86400
  id: ID!
  # date - hour start timestamp
  date: Int!
  tokenAddress: Bytes! # address
  symbol: String!
  name: String!
  decimals: BigInt!
  collateral_amount: BigDecimal! # uint256
  bitu_amount: BigDecimal! # uint256
  redeem: [Redeem!]! @derivedFrom(field: "dayData")
}

# Staking Contract
type RewardsReceived @entity {
  id: Bytes!
  amount: BigDecimal! # uint256
  newVestingBITUAmount: BigDecimal! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardTotal @entity {
  id: ID!
  total: BigDecimal! # uint256
  dyr: BigDecimal! # uint256
  lastAmount: BigDecimal! # uint256
  lastNewVestingBITUAmount: BigDecimal! # uint256
  lastBlockNumber: BigInt!
  lastTimestamp: BigInt!
  lastTransactionHash: Bytes!

  previousDateTimestamp: BigInt!
  previousDateTotal: BigDecimal!
}

# BITU & SBITU
type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # token
  totalSupply: BigDecimal!

  holderCount: BigInt!
}

type TokenHolder @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  tokenAddress: ID!
  symbol: String!
  name: String!
  decimals: BigInt!

  balance: BigDecimal!
  # User
  holder: Holder!
}

type Holder @entity {
  # Address
  id: ID!

  tokens: [TokenHolder!]! @derivedFrom(field: "holder")
}
